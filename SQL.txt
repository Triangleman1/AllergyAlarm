Just some pseudocode/notes/scraps as I learn SQL

CREATE TABLE user(
    datetime DATETIME PRIMARY KEY
    temperature INT 
    heartrate INT
)

INSERT INTO user
    (datetime, temperature, heartrate)
    VALUES (ex_datetime, ex_temperature, ex_heartrate)


SELECT temperature FROM user WHERE datetime > _____ ORDER BY datetime

After table creation code is added to models.py: 
python manage.py makemigrations
python manage.py migrate

To enter python shell and execute python's syntax for manipulating SQL there: 
python manage.py shell

In shell:
from allergy_alarm_app.models import UserData
a = UserData(datetime=ex_datetime, temperature=ex_temperature, heartrate=ex_heartrate) #Insert Query
a.save()
UserData.objects.all()  #Will print out all entries in table. For pretty names, need to implement def __str__(self) inside UserData class.
UserData.objects.filter(datetime>ex_datetime)   #Select
UserData.objects.get(temperature=ex_temperature)
UserData.objects.exclude(temperature=ex_temperature)

#Once we grab a row, we can access each table entry by specifying the column
row1 = UserData.objects.first()     #Grabs a row
row1.datetime      #returns this row's datetime
row1.temperature   #returns this row's temperature
row1.delete()      #deletes row
#Basically we can now use python syntax

To use relational nature of SQL, can replace a column with keys to a second table
temperature = models.ForeignKey(TableClass2, on_delete=models.CASCADE, related_name = "UserDataEntry")  
#The cascade parameter basically means that if an entry is deleted in one table and it is keyed in other tables, it'll be deleted from those tables too.
#The related_name will allow us to work backwards.

To manage databases through Django's UI, need to use our app's admin page.
First, add yourself as superuser. python manage.py createsuperuser
Will also need to import and register classes in admin.py (example in admin.py)